<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- SQL Mapping -->
<mapper namespace="home.example.board.repository.CommentMapper">

    <insert id="insertComment" useGeneratedKeys="true" keyProperty="comment_seq"
            parameterType="home.example.board.domain.Comment">
        INSERT INTO comment
            (post_seq, content, parent_comment_seq, reply_user_seq, user_seq)
        VALUES
            (#{post_seq}, #{content}, #{parent_comment_seq}, #{reply_user_seq}, #{user_seq})
    </insert>

    <select id="selectComments" parameterType="long"
        resultType="home.example.board.DTO.CommentDTO">
        SELECT
            c.comment_seq,
            IF(c.delete_flag > 0, 'delete comment', c.content) AS content,
            c.parent_comment_seq,
            c.reply_user_seq,
            c.insert_ts,
            c.user_seq,
            u.user_nickname AS user_name,
            ru.user_nickname AS reply_to_user_name,
            IFNULL(cl.like_cnt, 0) AS like_cnt,
            IFNULL(cl.dislike_cnt, 0) AS dislike_cnt,
            CASE
                WHEN c.parent_comment_seq IS NULL THEN 0
                ELSE 1
                END AS depth,
            CASE
                WHEN c.parent_comment_seq IS NULL THEN c.insert_ts
                ELSE parent.insert_ts
                END AS top_insert_ts
        FROM comment c
                 LEFT JOIN comment parent ON parent.comment_seq = c.parent_comment_seq
                 LEFT JOIN user u ON u.user_seq = c.user_seq
                 LEFT JOIN user ru ON ru.user_seq = c.reply_user_seq
                 LEFT JOIN (
            SELECT
                comment_seq,
                SUM(CASE WHEN like_type = 1 THEN 1 ELSE 0 END) AS like_cnt,
                SUM(CASE WHEN like_type = 0 THEN 1 ELSE 0 END) AS dislike_cnt
            FROM comment_like
            GROUP BY comment_seq
        ) cl ON cl.comment_seq = c.comment_seq
        WHERE c.post_seq = #{post_seq}
        ORDER BY
            top_insert_ts ASC,
            c.parent_comment_seq IS NULL DESC,
            c.insert_ts ASC;
    </select>

    <select id="selectComment"
            parameterType="long"
            resultType="home.example.board.domain.Comment">
        select
            comment_seq,
            post_seq,
            content,
            insert_ts,
            delete_ts,
            delete_flag,
            parent_comment_seq,
            user_seq,
            reply_user_seq
        from comment
        where
            comment_seq = #{comment_seq}
    </select>

    <update id="updateComment"
            parameterType="home.example.board.domain.Comment">
        update comment
            set content = #{content}
        where
            comment_seq = #{comment_seq}
    </update>

    <update id="deleteComment"
            parameterType="long">
        update comment
            set
                delete_flag = 1,
                delete_ts = now()
        where
            comment_seq = #{comment_seq}
    </update>

    <select id="getCommentAll" resultType="home.example.board.domain.Comment">
        SELECT
            c.comment_seq,
            c.post_seq,
            c.content,
            c.insert_ts,
            c.delete_ts,
            c.delete_flag,
            c.parent_comment_seq,
            c.user_seq,
            c.reply_user_seq
        FROM comment c
    </select>

    <select id="selectUserCommentsPaging" parameterType="map"
            resultType="home.example.board.domain.Comment">
        select
            comment_seq,
            post_seq,
            content,
            insert_ts,
            delete_ts,
            delete_flag,
            parent_comment_seq,
            user_seq,
            reply_user_seq
        from comment
        where
            user_seq = #{user_seq}
          and delete_flag = 0
        order by
            insert_ts desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectUserCommentsCount" parameterType="long"
            resultType="int">
        select
            count(*) as comment_count
        from comment
        where
            user_seq = #{user_seq}
        and delete_flag = 0
    </select>

    <update id="removeCommentAllByUser" parameterType="long">
        update comment
            set
                delete_flag = 1,
                delete_ts = now()
        where
            user_seq = #{user_seq}
    </update>
</mapper>